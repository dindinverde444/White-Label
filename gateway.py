#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gateway Simples - Um "Port√£o" para Gerenciar Requisi√ß√µes

O que √© um Gateway?
- √â como um porteiro de um pr√©dio que decide para onde direcionar as pessoas
- Recebe pedidos (requisi√ß√µes) e os encaminha para os lugares certos
- Pode fazer verifica√ß√µes de seguran√ßa antes de deixar passar
"""

import json
import time
from datetime import datetime

class GatewaySimples:
    """
    Classe principal do nosso Gateway
    Pense nela como o "c√©rebro" do nosso porteiro
    """
    
    def __init__(self):
        """
        Construtor - √© executado quando criamos um novo gateway
        Aqui definimos as configura√ß√µes iniciais
        """
        # Lista de servi√ßos que nosso gateway conhece
        self.servicos = {
            "usuario": "http://localhost:3001",
            "produto": "http://localhost:3002", 
            "pedido": "http://localhost:3003"
        }
        
        # Hist√≥rico de requisi√ß√µes (como um livro de registro)
        self.historico = []
        
        # Contador de requisi√ß√µes
        self.contador_requisicoes = 0
        
        print("üö™ Gateway iniciado com sucesso!")
        print("üìã Servi√ßos dispon√≠veis:")
        for nome, url in self.servicos.items():
            print(f"   - {nome}: {url}")
    
    def registrar_requisicao(self, tipo, dados):
        """
        Registra cada requisi√ß√£o que passa pelo gateway
        Como um porteiro anotando quem entrou e saiu
        """
        registro = {
            "id": self.contador_requisicoes + 1,
            "tipo": tipo,
            "dados": dados,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        self.historico.append(registro)
        self.contador_requisicoes += 1
        
        print(f"üìù Registrado: {tipo} - {dados}")
    
    def validar_requisicao(self, dados):
        """
        Verifica se a requisi√ß√£o √© v√°lida
        Como um porteiro verificando documentos
        """
        # Verifica se tem dados
        if not dados:
            return False, "Dados vazios"
        
        # Verifica se tem tipo de servi√ßo
        if "tipo" not in dados:
            return False, "Tipo de servi√ßo n√£o especificado"
        
        # Verifica se o servi√ßo existe
        if dados["tipo"] not in self.servicos:
            return False, f"Servi√ßo '{dados['tipo']}' n√£o encontrado"
        
        return True, "Requisi√ß√£o v√°lida"
    
    def processar_requisicao(self, dados):
        """
        Processa uma requisi√ß√£o
        √â o trabalho principal do nosso gateway
        """
        print(f"\nüîÑ Processando requisi√ß√£o...")
        
        # 1. Registra a requisi√ß√£o
        self.registrar_requisicao("entrada", dados)
        
        # 2. Valida a requisi√ß√£o
        valido, mensagem = self.validar_requisicao(dados)
        
        if not valido:
            print(f"‚ùå Erro: {mensagem}")
            return {"erro": mensagem}
        
        # 3. Simula o processamento (em um gateway real, aqui faria a requisi√ß√£o real)
        tipo_servico = dados["tipo"]
        url_servico = self.servicos[tipo_servico]
        
        print(f"‚úÖ Requisi√ß√£o v√°lida!")
        print(f"üì§ Encaminhando para: {url_servico}")
        
        # Simula um delay de processamento
        time.sleep(1)
        
        # 4. Simula resposta do servi√ßo
        resposta = {
            "status": "sucesso",
            "servico": tipo_servico,
            "url": url_servico,
            "mensagem": f"Dados processados pelo servi√ßo {tipo_servico}",
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # 5. Registra a resposta
        self.registrar_requisicao("saida", resposta)
        
        return resposta
    
    def mostrar_estatisticas(self):
        """
        Mostra estat√≠sticas do gateway
        Como um relat√≥rio do porteiro
        """
        print(f"\nüìä ESTAT√çSTICAS DO GATEWAY")
        print(f"   Total de requisi√ß√µes: {self.contador_requisicoes}")
        print(f"   Servi√ßos dispon√≠veis: {len(self.servicos)}")
        print(f"   Hist√≥rico de registros: {len(self.historico)}")
        
        if self.historico:
            print(f"\nüìã √öLTIMAS 5 REQUISI√á√ïES:")
            for registro in self.historico[-5:]:
                print(f"   [{registro['timestamp']}] {registro['tipo']}: {registro['dados']}")

def main():
    """
    Fun√ß√£o principal - onde tudo come√ßa
    """
    print("üöÄ INICIANDO GATEWAY SIMPLES")
    print("=" * 50)
    
    # Cria um novo gateway
    gateway = GatewaySimples()
    
    # Exemplos de requisi√ß√µes para testar
    exemplos = [
        {"tipo": "usuario", "acao": "criar", "nome": "Jo√£o Silva"},
        {"tipo": "produto", "acao": "listar", "categoria": "eletronicos"},
        {"tipo": "pedido", "acao": "buscar", "id": "12345"},
        {"tipo": "servico_inexistente", "acao": "teste"},  # Este vai dar erro
    ]
    
    print(f"\nüß™ TESTANDO O GATEWAY")
    print("=" * 50)
    
    # Processa cada exemplo
    for i, exemplo in enumerate(exemplos, 1):
        print(f"\n--- Teste {i} ---")
        resultado = gateway.processar_requisicao(exemplo)
        print(f"Resultado: {resultado}")
    
    # Mostra estat√≠sticas finais
    gateway.mostrar_estatisticas()
    
    print(f"\n‚úÖ Gateway funcionando perfeitamente!")
    print("üéâ Parab√©ns! Voc√™ criou seu primeiro gateway!")

if __name__ == "__main__":
    main()
